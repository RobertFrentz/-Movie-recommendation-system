@page "/movies/{movieId:int}"
@inject HttpClient Http
@using Newtonsoft.Json
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager


@if (finishedLoading)
{

    <PageTitle Title=@jsonObject.Title.ToString() />

    <div class="container">

        <h2 class="font-weight-light text-center text-lg-left mt-4 mb-0">@jsonObject.Title</h2>
        <hr class="mt-2 mb-5">

        <div class="container-fluid border p-3">

            <div class="media d-flex flex-wrap">

                <img src="@jsonObject.Poster" class="mr-4" style="width:300px">


                <div class="media-body">
                    <table class="table table-borderless">
                        <tbody>
                            <tr>
                                <td><h4>Title</h4></td>
                                <td>@jsonObject.Title</td>
                            </tr>
                            <tr>
                                <td><h4>Rating</h4></td>
                                <td>
                                    <RadzenRating Value="@starsRating" Change=@(args => OnChange(args, "Rating with 5 stars")) />
                                </td>
                            </tr>
                            <tr>
                                <td><h4>Released</h4></td>
                                <td>@jsonObject.Released</td>
                            </tr>
                            <tr>
                                <td><h4>Runtime</h4></td>
                                <td>@jsonObject.Runtime</td>
                            </tr>
                            <tr>
                                <td><h4>Genre</h4></td>
                                <td>@jsonObject.Genre</td>
                            </tr>
                            <tr>
                                <td><h4>Ratings</h4></td>
                                <td>
                                    <ul>
                                        @foreach (var item in jsonObject.Ratings)
                                        {
                                            <li>@item.Source: @item.Value</li>
                                        }
                                    </ul>
                                </td>
                            </tr>
                            <tr>
                                <td><h4>Production</h4></td>
                                <td>@jsonObject.Production</td>
                            </tr>
                        </tbody>
                    </table>

                </div>

            </div>

            <div class="container-fluid">
                <h3 class="font-weight-light text-center text-lg-left mt-0 mb-0">Plot</h3>
                <hr class="mt-2 mb-3">
                <p>@jsonObject.Plot</p>
            </div>

        </div>


    </div>

}

@code {

    [Parameter]
    public int movieId { get; set; }
    private bool finishedLoading = false;
    private string jsonString;
    private dynamic jsonObject = null;
    private string jwtToken;
    private int starsRating;
    private bool ratingExists;
    private string ratingsApiEndpoint = "http://localhost:5000/api/v1/ratings";
    private string movieDataApiEndpoint = "http://localhost:5000/api/v1/movies/moviedata/complete/";


    protected override async Task OnInitializedAsync()
    {
        if (!await VerifyAuthorization()) return;

        jsonString = await Http.GetStringAsync(movieDataApiEndpoint + movieId);
        jsonObject = JsonConvert.DeserializeObject(jsonString);
        finishedLoading = true;
        await GetRating();
    }


    private async Task GetRating()
    {
        string urlGet = ratingsApiEndpoint + "/" + movieId;
        var getRequest = new HttpRequestMessage(HttpMethod.Get, urlGet);
        getRequest.Headers.Add("Authentification_token", jwtToken);
        using var httpResponse = await Http.SendAsync(getRequest);

        if (!httpResponse.IsSuccessStatusCode)
        {
            starsRating = 0;
            Console.WriteLine("Rating not found");
            ratingExists = false;
            return;
        }

        ratingExists = true;
        starsRating = await httpResponse.Content.ReadFromJsonAsync<int>();
    }


    private async Task OnChange(int value, string name)
    {
        Console.WriteLine($"{name} value changed to {value}");

        if (value == 0 && ratingExists)  // DELETE
        {
            string urlDelete = ratingsApiEndpoint + "/" + movieId;
            var deleteRequest = new HttpRequestMessage(HttpMethod.Delete, urlDelete);
            deleteRequest.Headers.Add("Authentification_Token", jwtToken);
            using var response = await Http.SendAsync(deleteRequest);
            starsRating = 0;
        }
        else
        {
            if (ratingExists)  // PUT
            {
                var request = new HttpRequestMessage(HttpMethod.Put, ratingsApiEndpoint);
                var putBody = new { movieId = movieId, score = value };
                request.Content = new StringContent(System.Text.Json.JsonSerializer.Serialize(putBody), System.Text.Encoding.UTF8, "application/json");
                request.Headers.Add("Authentification_Token", jwtToken);
                using var response = await Http.SendAsync(request);
                starsRating = value;
            }
            else // POST
            {
                var request = new HttpRequestMessage(HttpMethod.Post, ratingsApiEndpoint);
                var postBody = new { movieId = movieId, score = value };
                request.Content = new StringContent(System.Text.Json.JsonSerializer.Serialize(postBody), System.Text.Encoding.UTF8, "application/json");
                request.Headers.Add("Authentification_Token", jwtToken);
                using var response = await Http.SendAsync(request);
                starsRating = value;
                ratingExists = true;
            }
        }

    }


    public async Task<bool> VerifyAuthorization()
    {
        jwtToken = await sessionStorage.GetItemAsync<string>("jwt");
        if (string.IsNullOrWhiteSpace(jwtToken))
        {
            NavManager.NavigateTo("/login", true);
            return false;
        }
        return true;
    }


    public class MovieRating
    {
        public int movieId { get; set; }
        public int rating { get; set; }
    }
}
