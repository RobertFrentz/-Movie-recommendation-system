@page "/movies/{movieId:int}"
@inject HttpClient Http
@using Newtonsoft.Json
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage


@if (finishedLoading)
{
    <div class="container">

        <h2 class="font-weight-light text-center text-lg-left mt-4 mb-0">@jsonObject.Title</h2>
        <hr class="mt-2 mb-5">

        <div class="container-fluid border p-3">

            <div class="media d-flex flex-wrap">

                <img src="@jsonObject.Poster" class="mr-4" style="width:300px">


                <div class="media-body">
                    <table class="table table-borderless">
                        <tbody>
                            <tr>
                                <td><h4>Title</h4></td>
                                <td>@jsonObject.Title</td>
                            </tr>
                            @if (token != null)
                            {
                            <tr>
                                <td><h4>Rating</h4></td>
                                <td>
                                    <RadzenRating Value= "@starsRating"
                                                  Change=@(args => OnChange(args, "Rating with 5 stars")) />
                                </td>
                            </tr>
                            }
                            <tr>
                                <td><h4>Released</h4></td>
                                <td>@jsonObject.Released</td>
                            </tr>
                            <tr>
                                <td><h4>Runtime</h4></td>
                                <td>@jsonObject.Runtime</td>
                            </tr>
                            <tr>
                                <td><h4>Genre</h4></td>
                                <td>@jsonObject.Genre</td>
                            </tr>
                            <tr>
                                <td><h4>Ratings</h4></td>
                                <td>
                                    <ul>
                                        @foreach (var item in jsonObject.Ratings)
                                        {
                                            <li>@item.Source: @item.Value</li>
                                        }
                                    </ul>
                                </td>
                            </tr>
                            <tr>
                                <td><h4>Production</h4></td>
                                <td>@jsonObject.Production</td>
                            </tr>
                        </tbody>
                    </table>

                </div>

            </div>

            <div class="container-fluid">
                <h3 class="font-weight-light text-center text-lg-left mt-0 mb-0">Plot</h3>
                <hr class="mt-2 mb-3">
                <p>@jsonObject.Plot</p>
            </div>

        </div>


    </div>

}

@code {
    [Parameter]
    public int movieId { get; set; }
    private bool finishedLoading = false;
    private string jsonString;
    private dynamic jsonObject = null;
    private string token;
    private int starsRating;

    protected override async Task OnInitializedAsync()
    {
        string URL = "http://localhost:5000/api/Movies/MoviesData/" + movieId;
        jsonString = await Http.GetStringAsync(URL);
        jsonObject = JsonConvert.DeserializeObject(jsonString);
        finishedLoading = true;
        token = await sessionStorage.GetItemAsync<string>("jwt");
        await GetRating();
    }

    private async Task GetRating()
    {
        string urlGet = "http://localhost:5050/api/v1/ratings/" + movieId;
        var getRequest = new HttpRequestMessage(HttpMethod.Get, urlGet);

        // add custom http header
        getRequest.Headers.Add("Authentification_token", token);

        // send request
        using var httpResponse = await Http.SendAsync(getRequest);
        if (!httpResponse.IsSuccessStatusCode)
        {
            // set error message for display, log to console and return
            starsRating = 0;
            Console.WriteLine("Rating not found");
            return;
        }
        starsRating = await httpResponse.Content.ReadFromJsonAsync<int>();

    }

    private async Task OnChange(int value, string name)
    {
        Console.WriteLine($"{name} value changed to {value}");
        string url = "http://localhost:5050/api/v1/ratings";
        if (value == 0)
        {
            string urlDelete = "http://localhost:5050/api/v1/ratings/" + movieId;
            /*Http.DefaultRequestHeaders.Add("Authentification_Token", token);
            var httpResponse = await Http.DeleteAsync(url);*/
            var deleteRequest = new HttpRequestMessage(HttpMethod.Delete, urlDelete);

            // add custom http header
            deleteRequest.Headers.Add("Authentification_Token", token);

            // send request
            using var response = await Http.SendAsync(deleteRequest);
            starsRating = value;


        }
        else if(starsRating == 0)
        {

            //Console.WriteLine(movieRating.rating);
            //Http.DefaultRequestHeaders.Add("Authentification_Token", token);
            var request = new HttpRequestMessage(HttpMethod.Post, url);
            var postBody = new { movieId = movieId, score = value };
            Console.WriteLine($"I-a fost dat filmului cu id-ul {postBody.movieId} rating-ul cu valoarea {postBody.score}");
            request.Content = new StringContent(System.Text.Json.JsonSerializer.Serialize(postBody), System.Text.Encoding.UTF8, "application/json");

            // add custom http header
            request.Headers.Add("Authentification_Token", token);

            // send request
            using var response = await Http.SendAsync(request);
            starsRating = value;

        }
        else
        {
            var request = new HttpRequestMessage(HttpMethod.Put, url);
            var putBody = new { movieId = movieId, score = value };
            Console.WriteLine($"I-a fost dat filmului cu id-ul {putBody.movieId} rating-ul cu valoarea {putBody.score}");
            request.Content = new StringContent(System.Text.Json.JsonSerializer.Serialize(putBody), System.Text.Encoding.UTF8, "application/json");

            // add custom http header
            request.Headers.Add("Authentification_Token", token);

            // send request
            using var response = await Http.SendAsync(request);
            starsRating = value;
        }

    }

    public class MovieRating
    {
        public int movieId { get; set; }
        public int rating { get; set; }
    }
}
