@page "/movies/{movieCategory?}"
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager
@using Newtonsoft.Json
@using Microsoft.AspNetCore.WebUtilities

<PageTitle Title="Movies" />

<div class="row d-flex flex-wrap-reverse">

    <div class="container col-xl-10">

        <h1 class="font-weight-light text-center text-lg-left mt-4 mb-0">@TitleToDisplay</h1>
        <hr class="mt-2 mb-5">

        @if (moviesToDisplay == null)
        {
            if (searchResultIsEmpty == false)
            {
                <p><em>Loading Movies Data...</em></p>
                <img class="mx-auto d-block" src="images/loading.gif" alt="Image">
            }
        }
        else
        {

            <div class="row">
                @foreach (var item in moviesToDisplay)
                {
                    <div class="container border shadow text-center mb-4" style="width: 300px; min-height: 450px; ">
                        <a class="text-decoration-none" href="movies/@item.Id">
                            <img src="@item.PosterUrl" alt="@item.Title Poster" title="@item.Title" style="width:100%; height:400px">
                            <p class="mt-2">@item.Title</p>
                        </a>
                    </div>

                }
            </div>

            <ul class="pagination justify-content-end">
                <li class="page-item"><button class="page-link" @onclick='(() => SetPreviousPageMovies())'>Previous</button></li>
                @if (numberOfPages < 10)
                {
                    @for (int pageN = 1; pageN <= numberOfPages; pageN++)
                    {
                        var localCopy = pageN;
                        if (pageN == currentPage)
                        {
                            <li class="page-item active"><button class="page-link" @onclick='(() => GetMoviesOnGivenPage(localCopy))'>@localCopy</button></li>
                        }
                        else
                        {
                            <li class="page-item"><button class="page-link" @onclick='(() => GetMoviesOnGivenPage(localCopy))'>@localCopy</button></li>
                        }
                    }
                }
                else
                {
                    @for (int pageN = 1; pageN <= 3; pageN++)
                    {
                        var localCopy = pageN;
                        if (pageN == currentPage)
                        {
                            <li class="page-item active"><button class="page-link" @onclick='(() => GetMoviesOnGivenPage(localCopy))'>@localCopy</button></li>
                        }
                        else
                        {
                            <li class="page-item"><button class="page-link" @onclick='(() => GetMoviesOnGivenPage(localCopy))'>@localCopy</button></li>
                        }
                    }
                    <li class="page-item"><button class="page-link">...</button></li>
                    if ((currentPage < 4) || (currentPage > (numberOfPages - 3)))
                    {
                        var middleIndex = numberOfPages / 2;
                        @for (int pageN = middleIndex - 1; pageN <= middleIndex + 1; pageN++)
                        {
                            var localCopy = pageN;
                            if (pageN == currentPage)
                            {
                                <li class="page-item active"><button class="page-link" @onclick='(() => GetMoviesOnGivenPage(localCopy))'>@localCopy</button></li>
                            }
                            else
                            {
                                <li class="page-item"><button class="page-link" @onclick='(() => GetMoviesOnGivenPage(localCopy))'>@localCopy</button></li>
                            }
                        }
                    }
                    else
                    {
                        @for (int pageN = currentPage - 1; pageN <= currentPage + 1; pageN++)
                        {
                            var localCopy = pageN;
                            if (pageN == currentPage)
                            {
                                <li class="page-item active"><button class="page-link" @onclick='(() => GetMoviesOnGivenPage(localCopy))'>@localCopy</button></li>
                            }
                            else
                            {
                                <li class="page-item"><button class="page-link" @onclick='(() => GetMoviesOnGivenPage(localCopy))'>@localCopy</button></li>
                            }
                        }
                    }
                    <li class="page-item"><button class="page-link">...</button></li>
                    @for (int pageN = numberOfPages - 2; pageN <= numberOfPages; pageN++)
                    {
                        var localCopy = pageN;
                        if (pageN == currentPage)
                        {
                            <li class="page-item active"><button class="page-link" @onclick='(() => GetMoviesOnGivenPage(localCopy))'>@localCopy</button></li>
                        }
                        else
                        {
                            <li class="page-item"><button class="page-link" @onclick='(() => GetMoviesOnGivenPage(localCopy))'>@localCopy</button></li>
                        }
                    }

                }

                <li class="page-item"><button class="page-link" @onclick='(() => SetNextPageMovies())'>Next</button></li>
            </ul>
        }


    </div>

    <div class="container col-xl-2">
        <div class="container-fluid mb-4">
            <h4 class="font-weight-light text-center mb-3">Search:</h4>
            <input type="text" class="w-100 mb-2" @bind="searchMovieName" />
            <button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToSearch(searchMovieName))'>Search</button>
        </div>

        <div class="container-fluid mb-4">
            <h4 class="font-weight-light text-center mb-3">Browse:</h4>
            <button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("recommended"))'>Browse Recommended</button>
            <button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("random"))'>Browse Random</button>
            <button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("rated"))'>Browse Rated</button>
        </div>

        <div class="container-fluid">
            <h4 class="font-weight-light text-center mb-3">Find by category:</h4>
            <div class="btn-group-vertical w-100">
                <button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("action"))'>Action</button>
                <button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("adventure"))'>Adventure</button>
                <button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("animation"))'>Animation</button>
                @*<button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("Biography"))'>Biography</button>*@
                <button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("Comedy"))'>Comedy</button>
                <button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("Crime"))'>Crime</button>
                <button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("Documentary"))'>Documentary</button>
                <button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("Drama"))'>Drama</button>
                @*<button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("Family"))'>Family</button>*@
                <button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("Fantasy"))'>Fantasy</button>
                @*<button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("Film Noir"))'>Film Noir</button>*@
                @*<button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("History"))'>History</button>*@
                <button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("Horror"))'>Horror</button>
                @*<button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("Music"))'>Music</button>*@
                <button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("Mystery"))'>Mystery</button>
                <button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("Romance"))'>Romance</button>
                <button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("Sci-Fi"))'>Sci-Fi</button>
                @*<button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("Sport"))'>Sport</button>*@
                @*<button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("Superhero"))'>Superhero</button>*@
                <button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("Thriller"))'>Thriller</button>
                <button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("War"))'>War</button>
                <button type="button" class="btn btn-outline-dark btn-block" @onclick='(() => NavigateToCategory("Western"))'>Western</button>
            </div>
        </div>
    </div>

</div>


@code {
    [Parameter]
    public string movieCategory { get; set; }
    public List<string> movieGenres = new List<string> { "Action", "Adventure", "Animation", "Biography", "Comedy", "Crime", "Documentary", "Drama", "Family", "Fantasy",
        "Film Noir", "History", "Horror", "Music", "Mystery", "Romance", "Sci-Fi", "Sport", "Superhero", "Superhero", "Thriller", "War", "Western"};
    public List<string> movieBrowseTypes = new List<string> { "recommended", "random", "rated" };
    private string TitleToDisplay;
    private List<MovieDetails> moviesToDisplay;
    private List<int> receivedMoviesIds;
    private int numberOfPages, currentPage;
    private string searchMovieName;
    private bool searchResultIsEmpty;
    private int moviesPerPage = 12;
    private string jwtToken;

    private string summaryMovieDataApiUrl = "http://localhost:5000/api/v1/movies/moviedata/summary/";
    private string recommendedMoviesApiUrl = "http://localhost:5000/api/v1/search/ratings";
    private string randomMoviesApiUrl = "http://localhost:5000/api/v1/movies/random";
    private string ratedMoviesApiUrl = "http://localhost:5000/api/v1/ratings";
    private string searchMoviesByCategoryApiUrl = "http://localhost:5000/api/v1/search/category?category=";
    private string searchMoviesByKeywordApiUrl = "http://localhost:5000/api/v1/search/keyword?keyword=";


    protected override async Task OnInitializedAsync()
    {
        if (!await VerifyAuthorization()) { return; }

        Console.WriteLine($"----------------{movieCategory}--------------");

        await SetCategoryAndPage();
    }


    private async Task SetCategoryAndPage()
    {
        var query = new Uri(NavManager.Uri).Query;

        if (movieCategory != null)
        {
            if (movieGenres.Any(g => g.Equals(movieCategory, StringComparison.OrdinalIgnoreCase)))
            {
                await SearchMoviesByCategory(char.ToUpper(movieCategory[0]) + movieCategory.Substring(1)); // "Drama"
            }
            else if (movieBrowseTypes.Any(t => t.Equals(movieCategory, StringComparison.OrdinalIgnoreCase)))
            {
                switch (movieCategory)
                {
                    case "recommended":
                        await BrowseRecommendedMovies(); break;
                    case "rated":
                        await BrowseRatedMovies(); break;
                    default:
                        await BrowseRandomMovies(); break;
                }
            }
            else // invalid category
            {
                NavigateToCategory("recommended");
                return;
            }
        }
        else if (QueryHelpers.ParseQuery(query).TryGetValue("search", out var keywords))
        {
            await SearchMoviesByKeyword(keywords);
        }
        else // no search and no category
        {
            NavigateToCategory("recommended");
            return;
        }

        if (QueryHelpers.ParseQuery(query).TryGetValue("page", out var value))
        {
            Console.WriteLine($"----------------PAGE: {value}--------------");
            await SetCurrentPageData(Convert.ToInt32(value));
        }
        else
        {
            await SetCurrentPageData(1);
        }
    }


    private void NavigateToCategory(string category)
    {
        NavManager.NavigateTo($"/movies/{category}", true);
    }


    private void NavigateToSearch(string keyword)
    {
        var uri = new Uri(NavManager.BaseUri);
        var newQueryString = System.Web.HttpUtility.ParseQueryString(uri.Query);
        newQueryString.Remove("page");
        string pagePathWithoutQueryString = uri.GetLeftPart(UriPartial.Path);
        NavManager.NavigateTo(QueryHelpers.AddQueryString($"{NavManager.BaseUri}movies", new Dictionary<string, string> { { "search", keyword } }), true);
    }


    private void SetQueryPage(int pageN)
    {
        currentPage = pageN;
        var uri = new Uri(NavManager.Uri);
        var newQueryString = System.Web.HttpUtility.ParseQueryString(uri.Query);
        newQueryString.Remove("page");
        string pagePathWithoutQueryString = uri.GetLeftPart(UriPartial.Path);
        if (newQueryString.Count > 0)
            NavManager.NavigateTo(QueryHelpers.AddQueryString($"{pagePathWithoutQueryString}?{newQueryString}", new Dictionary<string, string> { { "page", pageN.ToString() } }));
        else
            NavManager.NavigateTo($"{pagePathWithoutQueryString}?page={pageN}");
    }


    private async Task SetCurrentPageData(int pageN)
    {
        numberOfPages = receivedMoviesIds.Count / moviesPerPage + 1;
        if (pageN > numberOfPages)
        {
            SetQueryPage(1);
        }
        else
        {
            SetQueryPage(pageN);
        }

        await GetMoviesOnGivenPage(currentPage);
    }


    private async Task BrowseRecommendedMovies()
    {
        TitleToDisplay = "Recommended for You:";
        moviesToDisplay = null;
        receivedMoviesIds = null;

        var request = new HttpRequestMessage(HttpMethod.Get, recommendedMoviesApiUrl);
        request.Headers.Add("Authentification_Token", jwtToken);
        using var httpResponse = await Http.SendAsync(request);
        receivedMoviesIds = await httpResponse.Content.ReadFromJsonAsync<List<int>>();
    }


    private async Task BrowseRandomMovies()
    {
        TitleToDisplay = "Some good movies:";
        moviesToDisplay = null;
        receivedMoviesIds = null;

        receivedMoviesIds = await Http.GetFromJsonAsync<List<int>>(randomMoviesApiUrl);
    }


    private async Task BrowseRatedMovies()
    {
        TitleToDisplay = "Rated movies:";
        moviesToDisplay = null;
        receivedMoviesIds = null;


        var getRequest = new HttpRequestMessage(HttpMethod.Get, ratedMoviesApiUrl);
        getRequest.Headers.Add("Authentification_token", jwtToken);
        using var httpResponse = await Http.SendAsync(getRequest);

        if (!httpResponse.IsSuccessStatusCode)
        {
            Console.WriteLine("No ratings found ?");
            TitleToDisplay = "Sorry, no rated movies yet 😔";
            receivedMoviesIds = new List<int>();
            return;
        }

        Dictionary<int, int> ratingsDictionary = await httpResponse.Content.ReadFromJsonAsync<Dictionary<int, int>>();
        receivedMoviesIds = ratingsDictionary.Keys.ToList();
    }


    private async Task SetNextPageMovies()
    {
        if ((currentPage + 1) <= numberOfPages)
        {
            currentPage++;
            await GetMoviesOnGivenPage(currentPage);
        }

    }

    private async Task SetPreviousPageMovies()
    {
        if ((currentPage - 1) >= 1)
        {
            currentPage--;
            await GetMoviesOnGivenPage(currentPage);
        }
    }

    private async Task GetMoviesOnGivenPage(int pageN)
    {
        SetQueryPage(pageN);

        int startPos, amount;
        moviesToDisplay = null;
        startPos = (pageN - 1) * moviesPerPage;
        amount = (pageN * moviesPerPage) < receivedMoviesIds.Count ? moviesPerPage : (receivedMoviesIds.Count - startPos);
        currentPage = pageN;
        moviesToDisplay = await GetMovieDetailsFromIdList(receivedMoviesIds.GetRange(startPos, amount));
        Console.WriteLine($"GetMoviesOnGivenPage: pageN:{pageN} startPos:{startPos} amount:{amount}" +
            $"receivedMoviesIds.Count:{receivedMoviesIds.Count} moviesToDisplay.Count:{moviesToDisplay.Count}");
    }


    private async Task SearchMoviesByKeyword(string keywords)
    {
        TitleToDisplay = "Search Result: ";
        moviesToDisplay = null;
        receivedMoviesIds = null;
        searchResultIsEmpty = false;

        if (string.IsNullOrWhiteSpace(keywords))
        {
            return;
        }

        var request = new HttpRequestMessage(HttpMethod.Get, searchMoviesByKeywordApiUrl + keywords);
        request.Headers.Add("Authentification_Token", jwtToken);
        using var httpResponse = await Http.SendAsync(request);
        receivedMoviesIds = await httpResponse.Content.ReadFromJsonAsync<List<int>>();

        if ((int)httpResponse.StatusCode != 200)
        {
            Console.WriteLine($"EROARE SearchMoviesByKeyword: {httpResponse.ReasonPhrase}");
            TitleToDisplay = "Sorry, no movies to show 😔";
            searchResultIsEmpty = true;
            return;
        }

        searchMovieName = string.Empty;
    }


    private async Task SearchMoviesByCategory(string category)
    {
        TitleToDisplay = category + " movies:";
        moviesToDisplay = null;
        searchResultIsEmpty = false;

        var request = new HttpRequestMessage(HttpMethod.Get, searchMoviesByCategoryApiUrl + category);
        request.Headers.Add("Authentification_Token", jwtToken);
        using var httpResponse = await Http.SendAsync(request);
        receivedMoviesIds = await httpResponse.Content.ReadFromJsonAsync<List<int>>();

        if ((int)httpResponse.StatusCode != 200)
        {
            Console.WriteLine($"EROARE SearchMoviesByCategory: {httpResponse.ReasonPhrase}");
            TitleToDisplay = $"Sorry, no {category} movies to show 😔";
            searchResultIsEmpty = true;
            return;
        }

    }

    private async Task<List<MovieDetails>> GetMovieDetailsFromIdList(IEnumerable<int> moviesIds)
    {
        List<MovieDetails> result = new List<MovieDetails>();

        foreach (int id in moviesIds)
        {
            MovieDetails temp = await GetMovieDetailsById(id);
            if (temp == null)
            {  // pentru filmele al caror id inca nu e in MovieManagementService
                continue;
            }
            Console.WriteLine($"{id} {temp.Title} {temp.PosterUrl}");
            result.Add(temp);
        }

        return result;
    }

    private async Task<MovieDetails> GetMovieDetailsById(int id)
    {

        MovieDetails movie;

        var httpResponse = await Http.GetAsync(summaryMovieDataApiUrl + id.ToString());

        if ((int)httpResponse.StatusCode != 200)
        {
            Console.WriteLine($"EROARE GetMovieDetailsById: {httpResponse.ReasonPhrase} pentru id-ul {id}");
            return null;
        }

        movie = await httpResponse.Content.ReadFromJsonAsync<MovieDetails>();

        return movie;
    }

    public async Task<bool> VerifyAuthorization()
    {
        jwtToken = await sessionStorage.GetItemAsync<string>("jwt");
        if (string.IsNullOrWhiteSpace(jwtToken))
        {
            NavManager.NavigateTo("/login", true);
            return false;
        }
        return true;
    }

    public class MovieDetails
    {
        public int Id { get; set; }
        public string Title { get; set; }
        public string Genres { get; set; }
        public string PosterUrl { get; set; }
    }
}
