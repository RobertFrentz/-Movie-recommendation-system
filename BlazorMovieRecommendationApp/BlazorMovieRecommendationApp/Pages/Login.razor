@page "/login"
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager


@if (isUserLoggedIn)
{
    <h2>Welcome back, @username</h2>
    <button type="button" class="btn btn-outline-dark" @onclick='(() => LogOut())'>Sign me out</button>
}
else
{
    <div class="container" style="max-width:650px;">

        <h2 class="font-weight-light text-center mt-4">Sign in</h2>
        <p>Login to receive personalised movies suggestions.</p>

        @*<form class="mb-4">*@
        <div class="mb-4">
            <div class="form-group">
                <label for="email">Email address:</label>
                <input type="email" class="form-control" id="email" placeholder="Enter email" name="email" required @bind="email">
            </div>
            <div class="form-group">
                <label for="pwd">Password:</label>
                <input type="password" class="form-control" id="pwd" placeholder="Enter password" name="pwd" required @bind="password">
            </div>
            <button class="btn btn-primary btn-block" @onclick='(() => SendLoginData())'>Login</button>

            @if (loginError == true)
            {
                <div class="alert alert-danger alert-dismissible mt-4">
                    @*<button type="button" class="close" data-dismiss="alert">&times;</button>*@
                    <strong>Attention!</strong> Invalid email or password.
                </div>
            }
        </div>

    </div>
}



@code {
    private string email;
    private string password;
    private string username;
    bool loginError = false;
    bool isUserLoggedIn;

    protected override async Task OnInitializedAsync()
    {
        isUserLoggedIn = await IsLoggedIn();
        if (isUserLoggedIn)
        {
            username = await sessionStorage.GetItemAsync<string>("username");
        }
    }


    private async Task SendLoginData()
    {
        string apiUrl = "http://localhost:5050/api/v1/users/login";

        LoginCredentials loginCredentials = new LoginCredentials { email = email, password = password };

        var httpResponse = await Http.PostAsJsonAsync(apiUrl, loginCredentials);


        LoginError loginErrorObj;
        if ((int)httpResponse.StatusCode != 200)
        {
            Console.WriteLine($"There was an error! { httpResponse.ReasonPhrase}");
            loginErrorObj = await httpResponse.Content.ReadFromJsonAsync<LoginError>();
            loginError = true;
            Console.WriteLine($"{httpResponse.ReasonPhrase} ----- {loginErrorObj.error_info}");
            return;
        }

        List<string> temp = await httpResponse.Content.ReadFromJsonAsync<List<string>>();

        await sessionStorage.SetItemAsync("jwt", temp[0]);
        await sessionStorage.SetItemAsync("username", temp[1]);

        NavManager.NavigateTo("/movies");
    }

    public async Task<bool> IsLoggedIn()
    {
        var token = await sessionStorage.GetItemAsync<string>("jwt");
        return !string.IsNullOrWhiteSpace(token);
    }

    public async void LogOut()
    {
        //this will clear the session data
        await sessionStorage.ClearAsync();
        NavManager.NavigateTo("/login", true);
    }


    public class LoginCredentials
    {
        public string email { get; set; }
        public string password { get; set; }
    }

    public class LoginError
    {
        public string error_info { get; set; }
    }

}
