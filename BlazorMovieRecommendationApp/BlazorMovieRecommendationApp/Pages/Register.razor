@page "/register"
@inject HttpClient Http
@inject Blazored.SessionStorage.ISessionStorageService sessionStorage
@inject NavigationManager NavManager


@if (isUserLoggedIn)
{
    <h2>Welcome back, @username</h2>
    <button type="button" class="btn btn-outline-dark" @onclick='(() => LogOut())'>Sign me out</button>
}
else
{

    <div class="container" style="max-width:650px;">

        <h2 class="font-weight-light text-center mt-4">Sign up</h2>
        <p>Create an account to receive personalised movies suggestions.</p>
        @*<hr class="mt-2 mb-5">*@

        <form class="mb-4" onsubmit="return false">
            <div class="form-group">
                <label for="name">Username</label>
                <input type="text" class="form-control" id="name" placeholder="Enter username" name="name" required @bind="username">
            </div>
            <div class="form-group">
                <label for="email">Email address:</label>
                <input type="email" class="form-control" id="email" placeholder="Enter email" name="email" required @bind="email">
            </div>
            <div class="form-group">
                <label for="pwd">Password:</label>
                <input type="password" class="form-control" id="pwd" placeholder="Enter password" name="pwd" required @bind="password">
            </div>
            <div class="form-group">
                <label for="rpt-pwd">Repeat password:</label>
                <input type="password" class="form-control" id="rpt-pwd" placeholder="Enter password" name="rpt-pwd" required @bind="confirmPassword">
            </div>

            <button type="submit" class="btn btn-primary btn-block" @onclick='(() => SendRegisterData())'>Register</button>

            @if (registerError == true)
            {
                <div class="alert alert-danger alert-dismissible mt-4">
                    @*<button type="button" class="close" data-dismiss="alert">&times;</button>*@
                    <strong>Attention!</strong> @registerErrorMessage.
                </div>
            }
        </form>
    </div>
}

@code {
    private string username;
    private string email;
    private string password;
    private string confirmPassword;

    bool registerError;
    string registerErrorMessage;
    bool isUserLoggedIn;

    protected override async Task OnInitializedAsync()
    {
        isUserLoggedIn = await IsLoggedIn();
        if (isUserLoggedIn)
        {
            username = await sessionStorage.GetItemAsync<string>("username");
        }
    }

    private async Task SendRegisterData()
    {
        string apiUrl = "http://localhost:5000/api/v2/users/register";

        if (string.IsNullOrWhiteSpace(username) || string.IsNullOrWhiteSpace(email) ||
            string.IsNullOrWhiteSpace(password) || string.IsNullOrWhiteSpace(confirmPassword))
        {
            return;
        }

        RegisterCredentials loginCredentials = new RegisterCredentials { userName = username, email = email, password = password, confirmPassword = confirmPassword };

        var httpResponse = await Http.PostAsJsonAsync(apiUrl, loginCredentials);


        RegisterError registerErrorObj;
        if ((int)httpResponse.StatusCode != 200)
        {
            Console.WriteLine($"There was an error! { httpResponse.ReasonPhrase}");
            registerErrorObj = await httpResponse.Content.ReadFromJsonAsync<RegisterError>();
            registerError = true;
            registerErrorMessage = registerErrorObj.error_info;
            Console.WriteLine($"{httpResponse.ReasonPhrase} ----- {registerErrorObj.error_info}");
            return;
        }

        List<string> temp = await httpResponse.Content.ReadFromJsonAsync<List<string>>();

        await sessionStorage.SetItemAsync("jwt", temp[0]);
        await sessionStorage.SetItemAsync("username", temp[1]);

        NavManager.NavigateTo("/movies", true);
    }

    public async Task<bool> IsLoggedIn()
    {
        var token = await sessionStorage.GetItemAsync<string>("jwt");
        return !string.IsNullOrWhiteSpace(token);
    }

    public async void LogOut()
    {
        //this will clear the session data
        await sessionStorage.ClearAsync();
        NavManager.NavigateTo("/login", true);
    }

    public class RegisterCredentials
    {
        public string userName { get; set; }
        public string email { get; set; }
        public string password { get; set; }
        public string confirmPassword { get; set; }
    }

    public class RegisterError
    {
        public string error_info { get; set; }
    }
}
