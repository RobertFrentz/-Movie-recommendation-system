// This file was auto-generated by ML.NET Model Builder. 

using System;
using System.Collections.Generic;
using System.Linq;
using ML_TestPredML.Model;
using SearchingMovieMicroService;

namespace ML_TestPredML.ConsoleApp
{
    class Program
    {
        static void Main(string[] args)
        {
            // Create single instance of sample data from first line of dataset for model input
            /*ModelInput sampleData = new ModelInput()
            {
                UserId = 1F,
                MovieId = 2F,
            };

            // Make a single prediction on the sample data and print results
            var predictionResult = ConsumeModel.Predict(sampleData);

            Console.WriteLine("Using model to make single prediction -- Comparing actual Rating with predicted Rating from sample data...\n\n");
            Console.WriteLine($"UserId: {sampleData.UserId}");
            Console.WriteLine($"MovieId: {sampleData.MovieId}");
            Console.WriteLine($"\n\nPredicted Rating: {predictionResult.Score}\n\n");
            Console.WriteLine("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();*/

           /* RecommendedMoviesIdByCategory(1, "Drama");
            Console.WriteLine("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();*/
            //RecommendedMoviesIdByTag(18, "dark");
            RecommendedMoviesIdByTitle(2, "Toy");
        }
        public static float Prediction(ModelInput data)
        {
            var predictionResult = ConsumeModel.Predict(data);
            return predictionResult.Score;
        }

        public static void RecommendedMoviesIdByCategory(float userId, string category)
        {

            List<float> moviesId = CSVParser.ImportMovieFromCategorySpecified(category);
            SortedList<float,float> predictions = new SortedList<float, float>();
            for (int i = 0; i < 15; i++)
            {
                ModelInput data = new ModelInput()
                {
                    UserId = userId,
                    MovieId = moviesId[i],
                };
                float predict = Prediction(data);
                if (!predictions.ContainsKey(moviesId[i]))
                {
                    predictions.Add(moviesId[i], predict);
                }
            }
            foreach (KeyValuePair<float, float> prediction in predictions)
            {
                Console.WriteLine("User: " + userId + " MovieId: " + prediction.Value + " Rating: " + prediction.Key);
            }
        }

        public static void RecommendedMoviesIdByTag(float userId, string tag)
        {

            List<float> moviesId = CSVParser.ImportMovieFromTagSpecified(tag);
            SortedList<float, float> predictions = new SortedList<float, float>();
            for (int i = 0; i < 15; i++)
            {
                ModelInput data = new ModelInput()
                {
                    UserId = userId,
                    MovieId = moviesId[i],
                };
                float predict = Prediction(data);
                if (!predictions.ContainsKey(moviesId[i]))
                {
                    predictions.Add(moviesId[i], predict);
                }
            }
            var predictionsOrderedRating = predictions.OrderBy(r => r.Value);
            foreach (KeyValuePair<float, float> prediction in predictionsOrderedRating)
            {
                Console.WriteLine("User: " + userId + " MovieId: " + prediction.Key + " Rating: " + prediction.Value);
            }
        }
        public static void RecommendedMoviesIdByTitle(float userId, string title)
        {

            List<float> moviesId = CSVParser.ImportMovieFromTitleSpecified(title);
            SortedList<float, float> predictions = new SortedList<float, float>();
            for (int i = 0; i < 15; i++)
            {
                ModelInput data = new ModelInput()
                {
                    UserId = userId,
                    MovieId = moviesId[i],
                };
                float predict = Prediction(data);
                if (!predictions.ContainsKey(moviesId[i]))
                {
                    predictions.Add(moviesId[i], predict);
                }
            }
            var predictionsOrderedRating = predictions.OrderBy(r => r.Value);
            foreach (KeyValuePair<float, float> prediction in predictionsOrderedRating)
            {
                Console.WriteLine("User: " + userId + " MovieId: " + prediction.Key + " Rating: " + prediction.Value);
            }
        }
    }
}
